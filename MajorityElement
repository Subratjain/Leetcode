/*  
Given an array nums of size n, return the majority element.

The majority element is the element that appears more than ⌊n / 2⌋ times. You may assume that the majority element always exists in the array.

 

Example 1:

Input: nums = [3,2,3]
Output: 3
Example 2:

Input: nums = [2,2,1,1,1,2,2]
Output: 2
 

Constraints:

n == nums.length
1 <= n <= 5 * 104
-109 <= nums[i] <= 109
*/

class Solution {
    public int majorityElement(int[] nums) {
        int majority_index =0;
        int count=1;
        for(int i=1;i<nums.length;i++){
           count += nums[i] == nums[majority_index]?1:-1;
           if(count==0){
               majority_index=++i;
               count++;
           }
        }
        return nums[majority_index];
    }
}
